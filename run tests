import matplotlib.pyplot as plt
import torch
import torch.nn as nn

from torchvision import transforms
import os
from PIL import Image
import csv



class AutoEncoder(nn.Module):

    def __init__(self):
        super().__init__()
        # N, 1, 128, 128
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 16, 3, stride=2, padding=1), #N, 16, 64,64
            nn.ReLU(),
            nn.Conv2d(16, 32, 3, stride=2, padding=1), #N, 32, 32,32
            nn.ReLU(),
            nn.Conv2d(32, 64, 3, stride=2, padding=1),  # N, 64, 16,16
            nn.ReLU(),
            nn.Conv2d(64, 128, 3, stride=2, padding=1),  # N, 128, 8,8
            nn.ReLU(),
            nn.Conv2d(128, 256, 3, stride=2, padding=1),  # N, 256, 4,4
            nn.ReLU(),
            nn.Conv2d(256, 512, 4)  # N, 512, 1,1

        )

        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(512, 256, 4),  # N, 256, 4,4
            nn.ReLU(),
            nn.ConvTranspose2d(256, 128, 3, stride=2, padding=1, output_padding=1),  # N, 128, 8,8
            nn.ReLU(),
            nn.ConvTranspose2d(128, 64, 3, stride=2, padding=1, output_padding=1),  # N, 64, 16,16
            nn.ReLU(),
            nn.ConvTranspose2d(64, 32, 3, stride=2, padding=1, output_padding=1),  # N, 32, 32,32
            nn.ReLU(),
            nn.ConvTranspose2d(32, 16, 3, stride=2, padding=1, output_padding=1),  # N, 16, 64,64
            nn.ReLU(),
            nn.ConvTranspose2d(16, 1, 3, stride=2, padding=1, output_padding=1),  # N, 1, 128, 128
            nn.Sigmoid()
        )

    def forward(self, x):
        encoded = self.encoder(x)

        # print('AAAAAH')
        # for i in range(len(self.encoder._modules)):
        #     print(x.shape, self.encoder._modules[str(i)])
        #     x = self.encoder._modules[str(i)](x)
        #     print(x.shape)
        decoded = self.decoder(encoded)
        return decoded


model = AutoEncoder()
model.load_state_dict(torch.load("C:/Users/William/Desktop/set1.pt"))
model.eval()
convert_tensor = transforms.ToTensor()
loss_fn = nn.MSELoss()


def runtests(holes, flag):
    outputs = []
    if flag == 1:
        for i in range(len(os.listdir('C:/Users/William/Desktop/{}h/safemonos'.format(holes)))):
            img = Image.open('C:/Users/William/Desktop/{}h/safemonos/mono{}.jpg'.format(holes, i))
            tensor = convert_tensor(img)
            mean = torch.mean(tensor)

            tensor = tensor.unsqueeze(1)

            recon = model(tensor)
            loss = loss_fn(recon, tensor)
            outputs.append((loss, mean, tensor, recon))

        f = open('C:/Users/William/Desktop/{}h/{}hsaferesults.csv'.format(str(holes), str(holes)), 'w')

        writer = csv.writer(f)
        writer.writerows(outputs)
        f.close()
        print(str(outputs[0][0]))

    elif flag == 0:
        for i in range(len(os.listdir('C:/Users/William/Desktop/{}h/monos'.format(holes)))):
            img = Image.open('C:/Users/William/Desktop/{}h/monos/mono{}.jpg'.format(holes, i))
            tensor = convert_tensor(img)
            mean = torch.mean(tensor)

            tensor = tensor.unsqueeze(1)

            recon = model(tensor)
            loss = loss_fn(recon, tensor)
            outputs.append((loss, mean, tensor, recon))

        f = open('C:/Users/William/Desktop/{}h/{}hresults.csv'.format(str(holes), str(holes)), 'w')

        writer = csv.writer(f)
        writer.writerows(outputs)
        f.close()
        print(str(outputs[0][0]))

    elif flag == 2:
        for i in range(len(os.listdir('C:/Users/William/Desktop/{}h/structuredmonos'.format(holes)))):
            img = Image.open('C:/Users/William/Desktop/{}h/structuredmonos/mono{}.jpg'.format(holes, i))
            tensor = convert_tensor(img)
            mean = torch.mean(tensor)

            tensor = tensor.unsqueeze(1)

            recon = model(tensor)
            loss = loss_fn(recon, tensor)
            outputs.append((loss, mean, tensor, recon))

        f = open('C:/Users/William/Desktop/{}h/{}hstructuredresults.csv'.format(str(holes), str(holes)), 'w')

        writer = csv.writer(f)
        writer.writerows(outputs)
        f.close()
        print(str(outputs[0][0]))


for i in range(1, 5):
    runtests(i, 1)
#     image = []
#     print(outputs[257][3])
#     image.append(outputs[257][3])
#     image.append(outputs[137][3])
#     image.append(outputs[51][3])
#     for j in range(3):
#
#         plt.imshow(image[i])
#
# plt.show()



# for k in range(0, num_epochs, 4):
#     plt.figure(figsize=(9, 2))
#     plt.gray()
#     imgs = outputs[k][1].detach().numpy()
#     recon = outputs[k][2].detach().numpy()
#     for i, item in enumerate(imgs):
#         if i >= 9: break
#         plt.subplot(2, 9, i + 1)
#         # item = item.reshape(-1, 28,28) # -> use for Autoencoder_Linear
#         # item: 1, 28, 28
#         plt.imshow(item[0])
#
#     for i, item in enumerate(recon):
#         if i >= 9: break
#         plt.subplot(2, 9, 9 + i + 1)  # row_length + i + 1
#         # item = item.reshape(-1, 28,28) # -> use for Autoencoder_Linear
#         # item: 1, 28, 28
#         plt.imshow(item[0])
#
# plt.show()
